/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.resources.orders.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import com.paid.api.types.OrderLineCreate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderCreate.Builder.class)
public final class OrderCreate {
    private final Optional<String> customerId;

    private final Optional<String> customerExternalId;

    private final Optional<String> billingContactId;

    private final String name;

    private final Optional<String> description;

    private final String startDate;

    private final Optional<String> endDate;

    private final String currency;

    private final Optional<List<OrderLineCreate>> orderLines;

    private final Map<String, Object> additionalProperties;

    private OrderCreate(
            Optional<String> customerId,
            Optional<String> customerExternalId,
            Optional<String> billingContactId,
            String name,
            Optional<String> description,
            String startDate,
            Optional<String> endDate,
            String currency,
            Optional<List<OrderLineCreate>> orderLines,
            Map<String, Object> additionalProperties) {
        this.customerId = customerId;
        this.customerExternalId = customerExternalId;
        this.billingContactId = billingContactId;
        this.name = name;
        this.description = description;
        this.startDate = startDate;
        this.endDate = endDate;
        this.currency = currency;
        this.orderLines = orderLines;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("customerId")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    @JsonProperty("customerExternalId")
    public Optional<String> getCustomerExternalId() {
        return customerExternalId;
    }

    @JsonProperty("billingContactId")
    public Optional<String> getBillingContactId() {
        return billingContactId;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("startDate")
    public String getStartDate() {
        return startDate;
    }

    @JsonProperty("endDate")
    public Optional<String> getEndDate() {
        return endDate;
    }

    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    @JsonProperty("orderLines")
    public Optional<List<OrderLineCreate>> getOrderLines() {
        return orderLines;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderCreate && equalTo((OrderCreate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderCreate other) {
        return customerId.equals(other.customerId)
                && customerExternalId.equals(other.customerExternalId)
                && billingContactId.equals(other.billingContactId)
                && name.equals(other.name)
                && description.equals(other.description)
                && startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && currency.equals(other.currency)
                && orderLines.equals(other.orderLines);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerId,
                this.customerExternalId,
                this.billingContactId,
                this.name,
                this.description,
                this.startDate,
                this.endDate,
                this.currency,
                this.orderLines);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        StartDateStage name(@NotNull String name);

        Builder from(OrderCreate other);
    }

    public interface StartDateStage {
        CurrencyStage startDate(@NotNull String startDate);
    }

    public interface CurrencyStage {
        _FinalStage currency(@NotNull String currency);
    }

    public interface _FinalStage {
        OrderCreate build();

        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        _FinalStage customerExternalId(Optional<String> customerExternalId);

        _FinalStage customerExternalId(String customerExternalId);

        _FinalStage billingContactId(Optional<String> billingContactId);

        _FinalStage billingContactId(String billingContactId);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage endDate(Optional<String> endDate);

        _FinalStage endDate(String endDate);

        _FinalStage orderLines(Optional<List<OrderLineCreate>> orderLines);

        _FinalStage orderLines(List<OrderLineCreate> orderLines);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, StartDateStage, CurrencyStage, _FinalStage {
        private String name;

        private String startDate;

        private String currency;

        private Optional<List<OrderLineCreate>> orderLines = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> billingContactId = Optional.empty();

        private Optional<String> customerExternalId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OrderCreate other) {
            customerId(other.getCustomerId());
            customerExternalId(other.getCustomerExternalId());
            billingContactId(other.getBillingContactId());
            name(other.getName());
            description(other.getDescription());
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            currency(other.getCurrency());
            orderLines(other.getOrderLines());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public StartDateStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("startDate")
        public CurrencyStage startDate(@NotNull String startDate) {
            this.startDate = Objects.requireNonNull(startDate, "startDate must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public _FinalStage currency(@NotNull String currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage orderLines(List<OrderLineCreate> orderLines) {
            this.orderLines = Optional.ofNullable(orderLines);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderLines", nulls = Nulls.SKIP)
        public _FinalStage orderLines(Optional<List<OrderLineCreate>> orderLines) {
            this.orderLines = orderLines;
            return this;
        }

        @java.lang.Override
        public _FinalStage endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public _FinalStage endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public _FinalStage billingContactId(String billingContactId) {
            this.billingContactId = Optional.ofNullable(billingContactId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingContactId", nulls = Nulls.SKIP)
        public _FinalStage billingContactId(Optional<String> billingContactId) {
            this.billingContactId = billingContactId;
            return this;
        }

        @java.lang.Override
        public _FinalStage customerExternalId(String customerExternalId) {
            this.customerExternalId = Optional.ofNullable(customerExternalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "customerExternalId", nulls = Nulls.SKIP)
        public _FinalStage customerExternalId(Optional<String> customerExternalId) {
            this.customerExternalId = customerExternalId;
            return this;
        }

        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        @java.lang.Override
        public OrderCreate build() {
            return new OrderCreate(
                    customerId,
                    customerExternalId,
                    billingContactId,
                    name,
                    description,
                    startDate,
                    endDate,
                    currency,
                    orderLines,
                    additionalProperties);
        }
    }
}
