/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.resources.agents.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentCreate.Builder.class)
public final class AgentCreate {
    private final String name;

    private final String description;

    private final Optional<String> agentCode;

    private final Optional<String> externalId;

    private final Optional<Boolean> active;

    private final Map<String, Object> additionalProperties;

    private AgentCreate(
            String name,
            String description,
            Optional<String> agentCode,
            Optional<String> externalId,
            Optional<Boolean> active,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.agentCode = agentCode;
        this.externalId = externalId;
        this.active = active;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    @JsonProperty("agentCode")
    public Optional<String> getAgentCode() {
        return agentCode;
    }

    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentCreate && equalTo((AgentCreate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentCreate other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && agentCode.equals(other.agentCode)
                && externalId.equals(other.externalId)
                && active.equals(other.active);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.description, this.agentCode, this.externalId, this.active);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        DescriptionStage name(@NotNull String name);

        Builder from(AgentCreate other);
    }

    public interface DescriptionStage {
        _FinalStage description(@NotNull String description);
    }

    public interface _FinalStage {
        AgentCreate build();

        _FinalStage agentCode(Optional<String> agentCode);

        _FinalStage agentCode(String agentCode);

        _FinalStage externalId(Optional<String> externalId);

        _FinalStage externalId(String externalId);

        _FinalStage active(Optional<Boolean> active);

        _FinalStage active(Boolean active);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, DescriptionStage, _FinalStage {
        private String name;

        private String description;

        private Optional<Boolean> active = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<String> agentCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AgentCreate other) {
            name(other.getName());
            description(other.getDescription());
            agentCode(other.getAgentCode());
            externalId(other.getExternalId());
            active(other.getActive());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public DescriptionStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("description")
        public _FinalStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public _FinalStage active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public _FinalStage externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        public _FinalStage agentCode(String agentCode) {
            this.agentCode = Optional.ofNullable(agentCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "agentCode", nulls = Nulls.SKIP)
        public _FinalStage agentCode(Optional<String> agentCode) {
            this.agentCode = agentCode;
            return this;
        }

        @java.lang.Override
        public AgentCreate build() {
            return new AgentCreate(name, description, agentCode, externalId, active, additionalProperties);
        }
    }
}
