/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.resources.customers.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import com.paid.api.types.Address;
import com.paid.api.types.CreationSource;
import com.paid.api.types.TaxExemptStatus;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerCreate.Builder.class)
public final class CustomerCreate {
    private final String name;

    private final Optional<String> externalId;

    private final Optional<String> phone;

    private final Optional<Double> employeeCount;

    private final Optional<Double> annualRevenue;

    private final Optional<TaxExemptStatus> taxExemptStatus;

    private final Optional<CreationSource> creationSource;

    private final Optional<String> website;

    private final Optional<Address> billingAddress;

    private final Map<String, Object> additionalProperties;

    private CustomerCreate(
            String name,
            Optional<String> externalId,
            Optional<String> phone,
            Optional<Double> employeeCount,
            Optional<Double> annualRevenue,
            Optional<TaxExemptStatus> taxExemptStatus,
            Optional<CreationSource> creationSource,
            Optional<String> website,
            Optional<Address> billingAddress,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.externalId = externalId;
        this.phone = phone;
        this.employeeCount = employeeCount;
        this.annualRevenue = annualRevenue;
        this.taxExemptStatus = taxExemptStatus;
        this.creationSource = creationSource;
        this.website = website;
        this.billingAddress = billingAddress;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("employeeCount")
    public Optional<Double> getEmployeeCount() {
        return employeeCount;
    }

    @JsonProperty("annualRevenue")
    public Optional<Double> getAnnualRevenue() {
        return annualRevenue;
    }

    @JsonProperty("taxExemptStatus")
    public Optional<TaxExemptStatus> getTaxExemptStatus() {
        return taxExemptStatus;
    }

    @JsonProperty("creationSource")
    public Optional<CreationSource> getCreationSource() {
        return creationSource;
    }

    @JsonProperty("website")
    public Optional<String> getWebsite() {
        return website;
    }

    @JsonProperty("billingAddress")
    public Optional<Address> getBillingAddress() {
        return billingAddress;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerCreate && equalTo((CustomerCreate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerCreate other) {
        return name.equals(other.name)
                && externalId.equals(other.externalId)
                && phone.equals(other.phone)
                && employeeCount.equals(other.employeeCount)
                && annualRevenue.equals(other.annualRevenue)
                && taxExemptStatus.equals(other.taxExemptStatus)
                && creationSource.equals(other.creationSource)
                && website.equals(other.website)
                && billingAddress.equals(other.billingAddress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.externalId,
                this.phone,
                this.employeeCount,
                this.annualRevenue,
                this.taxExemptStatus,
                this.creationSource,
                this.website,
                this.billingAddress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(CustomerCreate other);
    }

    public interface _FinalStage {
        CustomerCreate build();

        _FinalStage externalId(Optional<String> externalId);

        _FinalStage externalId(String externalId);

        _FinalStage phone(Optional<String> phone);

        _FinalStage phone(String phone);

        _FinalStage employeeCount(Optional<Double> employeeCount);

        _FinalStage employeeCount(Double employeeCount);

        _FinalStage annualRevenue(Optional<Double> annualRevenue);

        _FinalStage annualRevenue(Double annualRevenue);

        _FinalStage taxExemptStatus(Optional<TaxExemptStatus> taxExemptStatus);

        _FinalStage taxExemptStatus(TaxExemptStatus taxExemptStatus);

        _FinalStage creationSource(Optional<CreationSource> creationSource);

        _FinalStage creationSource(CreationSource creationSource);

        _FinalStage website(Optional<String> website);

        _FinalStage website(String website);

        _FinalStage billingAddress(Optional<Address> billingAddress);

        _FinalStage billingAddress(Address billingAddress);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<Address> billingAddress = Optional.empty();

        private Optional<String> website = Optional.empty();

        private Optional<CreationSource> creationSource = Optional.empty();

        private Optional<TaxExemptStatus> taxExemptStatus = Optional.empty();

        private Optional<Double> annualRevenue = Optional.empty();

        private Optional<Double> employeeCount = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CustomerCreate other) {
            name(other.getName());
            externalId(other.getExternalId());
            phone(other.getPhone());
            employeeCount(other.getEmployeeCount());
            annualRevenue(other.getAnnualRevenue());
            taxExemptStatus(other.getTaxExemptStatus());
            creationSource(other.getCreationSource());
            website(other.getWebsite());
            billingAddress(other.getBillingAddress());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage billingAddress(Address billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingAddress", nulls = Nulls.SKIP)
        public _FinalStage billingAddress(Optional<Address> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        @java.lang.Override
        public _FinalStage website(String website) {
            this.website = Optional.ofNullable(website);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "website", nulls = Nulls.SKIP)
        public _FinalStage website(Optional<String> website) {
            this.website = website;
            return this;
        }

        @java.lang.Override
        public _FinalStage creationSource(CreationSource creationSource) {
            this.creationSource = Optional.ofNullable(creationSource);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "creationSource", nulls = Nulls.SKIP)
        public _FinalStage creationSource(Optional<CreationSource> creationSource) {
            this.creationSource = creationSource;
            return this;
        }

        @java.lang.Override
        public _FinalStage taxExemptStatus(TaxExemptStatus taxExemptStatus) {
            this.taxExemptStatus = Optional.ofNullable(taxExemptStatus);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "taxExemptStatus", nulls = Nulls.SKIP)
        public _FinalStage taxExemptStatus(Optional<TaxExemptStatus> taxExemptStatus) {
            this.taxExemptStatus = taxExemptStatus;
            return this;
        }

        @java.lang.Override
        public _FinalStage annualRevenue(Double annualRevenue) {
            this.annualRevenue = Optional.ofNullable(annualRevenue);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "annualRevenue", nulls = Nulls.SKIP)
        public _FinalStage annualRevenue(Optional<Double> annualRevenue) {
            this.annualRevenue = annualRevenue;
            return this;
        }

        @java.lang.Override
        public _FinalStage employeeCount(Double employeeCount) {
            this.employeeCount = Optional.ofNullable(employeeCount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "employeeCount", nulls = Nulls.SKIP)
        public _FinalStage employeeCount(Optional<Double> employeeCount) {
            this.employeeCount = employeeCount;
            return this;
        }

        @java.lang.Override
        public _FinalStage phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public _FinalStage phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public _FinalStage externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        public CustomerCreate build() {
            return new CustomerCreate(
                    name,
                    externalId,
                    phone,
                    employeeCount,
                    annualRevenue,
                    taxExemptStatus,
                    creationSource,
                    website,
                    billingAddress,
                    additionalProperties);
        }
    }
}
