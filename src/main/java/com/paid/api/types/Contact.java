/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Contact.Builder.class)
public final class Contact {
    private final Optional<String> id;

    private final Optional<String> externalId;

    private final Optional<String> organizationId;

    private final Optional<String> customerId;

    private final Optional<String> customerExternalId;

    private final Optional<Salutation> salutation;

    private final Optional<String> firstName;

    private final Optional<String> lastName;

    private final Optional<String> email;

    private final Optional<String> phone;

    private final Optional<String> billingStreet;

    private final Optional<String> billingCity;

    private final Optional<String> billingStateProvince;

    private final Optional<String> billingCountry;

    private final Optional<String> billingPostalCode;

    private final Map<String, Object> additionalProperties;

    private Contact(
            Optional<String> id,
            Optional<String> externalId,
            Optional<String> organizationId,
            Optional<String> customerId,
            Optional<String> customerExternalId,
            Optional<Salutation> salutation,
            Optional<String> firstName,
            Optional<String> lastName,
            Optional<String> email,
            Optional<String> phone,
            Optional<String> billingStreet,
            Optional<String> billingCity,
            Optional<String> billingStateProvince,
            Optional<String> billingCountry,
            Optional<String> billingPostalCode,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalId = externalId;
        this.organizationId = organizationId;
        this.customerId = customerId;
        this.customerExternalId = customerExternalId;
        this.salutation = salutation;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phone = phone;
        this.billingStreet = billingStreet;
        this.billingCity = billingCity;
        this.billingStateProvince = billingStateProvince;
        this.billingCountry = billingCountry;
        this.billingPostalCode = billingPostalCode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("organizationId")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    @JsonProperty("customerId")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    @JsonProperty("customerExternalId")
    public Optional<String> getCustomerExternalId() {
        return customerExternalId;
    }

    @JsonProperty("salutation")
    public Optional<Salutation> getSalutation() {
        return salutation;
    }

    @JsonProperty("firstName")
    public Optional<String> getFirstName() {
        return firstName;
    }

    @JsonProperty("lastName")
    public Optional<String> getLastName() {
        return lastName;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("billingStreet")
    public Optional<String> getBillingStreet() {
        return billingStreet;
    }

    @JsonProperty("billingCity")
    public Optional<String> getBillingCity() {
        return billingCity;
    }

    @JsonProperty("billingStateProvince")
    public Optional<String> getBillingStateProvince() {
        return billingStateProvince;
    }

    @JsonProperty("billingCountry")
    public Optional<String> getBillingCountry() {
        return billingCountry;
    }

    @JsonProperty("billingPostalCode")
    public Optional<String> getBillingPostalCode() {
        return billingPostalCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Contact && equalTo((Contact) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Contact other) {
        return id.equals(other.id)
                && externalId.equals(other.externalId)
                && organizationId.equals(other.organizationId)
                && customerId.equals(other.customerId)
                && customerExternalId.equals(other.customerExternalId)
                && salutation.equals(other.salutation)
                && firstName.equals(other.firstName)
                && lastName.equals(other.lastName)
                && email.equals(other.email)
                && phone.equals(other.phone)
                && billingStreet.equals(other.billingStreet)
                && billingCity.equals(other.billingCity)
                && billingStateProvince.equals(other.billingStateProvince)
                && billingCountry.equals(other.billingCountry)
                && billingPostalCode.equals(other.billingPostalCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.externalId,
                this.organizationId,
                this.customerId,
                this.customerExternalId,
                this.salutation,
                this.firstName,
                this.lastName,
                this.email,
                this.phone,
                this.billingStreet,
                this.billingCity,
                this.billingStateProvince,
                this.billingCountry,
                this.billingPostalCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> customerExternalId = Optional.empty();

        private Optional<Salutation> salutation = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> billingStreet = Optional.empty();

        private Optional<String> billingCity = Optional.empty();

        private Optional<String> billingStateProvince = Optional.empty();

        private Optional<String> billingCountry = Optional.empty();

        private Optional<String> billingPostalCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Contact other) {
            id(other.getId());
            externalId(other.getExternalId());
            organizationId(other.getOrganizationId());
            customerId(other.getCustomerId());
            customerExternalId(other.getCustomerExternalId());
            salutation(other.getSalutation());
            firstName(other.getFirstName());
            lastName(other.getLastName());
            email(other.getEmail());
            phone(other.getPhone());
            billingStreet(other.getBillingStreet());
            billingCity(other.getBillingCity());
            billingStateProvince(other.getBillingStateProvince());
            billingCountry(other.getBillingCountry());
            billingPostalCode(other.getBillingPostalCode());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @JsonSetter(value = "organizationId", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @JsonSetter(value = "customerExternalId", nulls = Nulls.SKIP)
        public Builder customerExternalId(Optional<String> customerExternalId) {
            this.customerExternalId = customerExternalId;
            return this;
        }

        public Builder customerExternalId(String customerExternalId) {
            this.customerExternalId = Optional.ofNullable(customerExternalId);
            return this;
        }

        @JsonSetter(value = "salutation", nulls = Nulls.SKIP)
        public Builder salutation(Optional<Salutation> salutation) {
            this.salutation = salutation;
            return this;
        }

        public Builder salutation(Salutation salutation) {
            this.salutation = Optional.ofNullable(salutation);
            return this;
        }

        @JsonSetter(value = "firstName", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "billingStreet", nulls = Nulls.SKIP)
        public Builder billingStreet(Optional<String> billingStreet) {
            this.billingStreet = billingStreet;
            return this;
        }

        public Builder billingStreet(String billingStreet) {
            this.billingStreet = Optional.ofNullable(billingStreet);
            return this;
        }

        @JsonSetter(value = "billingCity", nulls = Nulls.SKIP)
        public Builder billingCity(Optional<String> billingCity) {
            this.billingCity = billingCity;
            return this;
        }

        public Builder billingCity(String billingCity) {
            this.billingCity = Optional.ofNullable(billingCity);
            return this;
        }

        @JsonSetter(value = "billingStateProvince", nulls = Nulls.SKIP)
        public Builder billingStateProvince(Optional<String> billingStateProvince) {
            this.billingStateProvince = billingStateProvince;
            return this;
        }

        public Builder billingStateProvince(String billingStateProvince) {
            this.billingStateProvince = Optional.ofNullable(billingStateProvince);
            return this;
        }

        @JsonSetter(value = "billingCountry", nulls = Nulls.SKIP)
        public Builder billingCountry(Optional<String> billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }

        public Builder billingCountry(String billingCountry) {
            this.billingCountry = Optional.ofNullable(billingCountry);
            return this;
        }

        @JsonSetter(value = "billingPostalCode", nulls = Nulls.SKIP)
        public Builder billingPostalCode(Optional<String> billingPostalCode) {
            this.billingPostalCode = billingPostalCode;
            return this;
        }

        public Builder billingPostalCode(String billingPostalCode) {
            this.billingPostalCode = Optional.ofNullable(billingPostalCode);
            return this;
        }

        public Contact build() {
            return new Contact(
                    id,
                    externalId,
                    organizationId,
                    customerId,
                    customerExternalId,
                    salutation,
                    firstName,
                    lastName,
                    email,
                    phone,
                    billingStreet,
                    billingCity,
                    billingStateProvince,
                    billingCountry,
                    billingPostalCode,
                    additionalProperties);
        }
    }
}
