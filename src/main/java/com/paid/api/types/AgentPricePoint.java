/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentPricePoint.Builder.class)
public final class AgentPricePoint {
    private final Optional<Double> unitPrice;

    private final Optional<Double> minQuantity;

    private final Optional<Double> includedQuantity;

    private final Optional<List<AgentPricePointTiers>> tiers;

    private final Map<String, Object> additionalProperties;

    private AgentPricePoint(
            Optional<Double> unitPrice,
            Optional<Double> minQuantity,
            Optional<Double> includedQuantity,
            Optional<List<AgentPricePointTiers>> tiers,
            Map<String, Object> additionalProperties) {
        this.unitPrice = unitPrice;
        this.minQuantity = minQuantity;
        this.includedQuantity = includedQuantity;
        this.tiers = tiers;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("unitPrice")
    public Optional<Double> getUnitPrice() {
        return unitPrice;
    }

    @JsonProperty("minQuantity")
    public Optional<Double> getMinQuantity() {
        return minQuantity;
    }

    @JsonProperty("includedQuantity")
    public Optional<Double> getIncludedQuantity() {
        return includedQuantity;
    }

    @JsonProperty("tiers")
    public Optional<List<AgentPricePointTiers>> getTiers() {
        return tiers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentPricePoint && equalTo((AgentPricePoint) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentPricePoint other) {
        return unitPrice.equals(other.unitPrice)
                && minQuantity.equals(other.minQuantity)
                && includedQuantity.equals(other.includedQuantity)
                && tiers.equals(other.tiers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.unitPrice, this.minQuantity, this.includedQuantity, this.tiers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> unitPrice = Optional.empty();

        private Optional<Double> minQuantity = Optional.empty();

        private Optional<Double> includedQuantity = Optional.empty();

        private Optional<List<AgentPricePointTiers>> tiers = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AgentPricePoint other) {
            unitPrice(other.getUnitPrice());
            minQuantity(other.getMinQuantity());
            includedQuantity(other.getIncludedQuantity());
            tiers(other.getTiers());
            return this;
        }

        @JsonSetter(value = "unitPrice", nulls = Nulls.SKIP)
        public Builder unitPrice(Optional<Double> unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        public Builder unitPrice(Double unitPrice) {
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        @JsonSetter(value = "minQuantity", nulls = Nulls.SKIP)
        public Builder minQuantity(Optional<Double> minQuantity) {
            this.minQuantity = minQuantity;
            return this;
        }

        public Builder minQuantity(Double minQuantity) {
            this.minQuantity = Optional.ofNullable(minQuantity);
            return this;
        }

        @JsonSetter(value = "includedQuantity", nulls = Nulls.SKIP)
        public Builder includedQuantity(Optional<Double> includedQuantity) {
            this.includedQuantity = includedQuantity;
            return this;
        }

        public Builder includedQuantity(Double includedQuantity) {
            this.includedQuantity = Optional.ofNullable(includedQuantity);
            return this;
        }

        @JsonSetter(value = "tiers", nulls = Nulls.SKIP)
        public Builder tiers(Optional<List<AgentPricePointTiers>> tiers) {
            this.tiers = tiers;
            return this;
        }

        public Builder tiers(List<AgentPricePointTiers> tiers) {
            this.tiers = Optional.ofNullable(tiers);
            return this;
        }

        public AgentPricePoint build() {
            return new AgentPricePoint(unitPrice, minQuantity, includedQuantity, tiers, additionalProperties);
        }
    }
}
