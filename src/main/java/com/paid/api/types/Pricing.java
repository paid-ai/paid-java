/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Pricing.Builder.class)
public final class Pricing {
    private final Optional<String> eventName;

    private final boolean taxable;

    private final Optional<Double> creditCost;

    private final ChargeType chargeType;

    private final PricingModelType pricingModel;

    private final BillingFrequency billingFrequency;

    private final Map<String, AgentPricePoint> pricePoints;

    private final Map<String, Object> additionalProperties;

    private Pricing(
            Optional<String> eventName,
            boolean taxable,
            Optional<Double> creditCost,
            ChargeType chargeType,
            PricingModelType pricingModel,
            BillingFrequency billingFrequency,
            Map<String, AgentPricePoint> pricePoints,
            Map<String, Object> additionalProperties) {
        this.eventName = eventName;
        this.taxable = taxable;
        this.creditCost = creditCost;
        this.chargeType = chargeType;
        this.pricingModel = pricingModel;
        this.billingFrequency = billingFrequency;
        this.pricePoints = pricePoints;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventName")
    public Optional<String> getEventName() {
        return eventName;
    }

    @JsonProperty("taxable")
    public boolean getTaxable() {
        return taxable;
    }

    @JsonProperty("creditCost")
    public Optional<Double> getCreditCost() {
        return creditCost;
    }

    @JsonProperty("chargeType")
    public ChargeType getChargeType() {
        return chargeType;
    }

    @JsonProperty("pricingModel")
    public PricingModelType getPricingModel() {
        return pricingModel;
    }

    @JsonProperty("billingFrequency")
    public BillingFrequency getBillingFrequency() {
        return billingFrequency;
    }

    @JsonProperty("pricePoints")
    public Map<String, AgentPricePoint> getPricePoints() {
        return pricePoints;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Pricing && equalTo((Pricing) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Pricing other) {
        return eventName.equals(other.eventName)
                && taxable == other.taxable
                && creditCost.equals(other.creditCost)
                && chargeType.equals(other.chargeType)
                && pricingModel.equals(other.pricingModel)
                && billingFrequency.equals(other.billingFrequency)
                && pricePoints.equals(other.pricePoints);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.eventName,
                this.taxable,
                this.creditCost,
                this.chargeType,
                this.pricingModel,
                this.billingFrequency,
                this.pricePoints);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TaxableStage builder() {
        return new Builder();
    }

    public interface TaxableStage {
        ChargeTypeStage taxable(boolean taxable);

        Builder from(Pricing other);
    }

    public interface ChargeTypeStage {
        PricingModelStage chargeType(@NotNull ChargeType chargeType);
    }

    public interface PricingModelStage {
        BillingFrequencyStage pricingModel(@NotNull PricingModelType pricingModel);
    }

    public interface BillingFrequencyStage {
        _FinalStage billingFrequency(@NotNull BillingFrequency billingFrequency);
    }

    public interface _FinalStage {
        Pricing build();

        _FinalStage eventName(Optional<String> eventName);

        _FinalStage eventName(String eventName);

        _FinalStage creditCost(Optional<Double> creditCost);

        _FinalStage creditCost(Double creditCost);

        _FinalStage pricePoints(Map<String, AgentPricePoint> pricePoints);

        _FinalStage putAllPricePoints(Map<String, AgentPricePoint> pricePoints);

        _FinalStage pricePoints(String key, AgentPricePoint value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TaxableStage, ChargeTypeStage, PricingModelStage, BillingFrequencyStage, _FinalStage {
        private boolean taxable;

        private ChargeType chargeType;

        private PricingModelType pricingModel;

        private BillingFrequency billingFrequency;

        private Map<String, AgentPricePoint> pricePoints = new LinkedHashMap<>();

        private Optional<Double> creditCost = Optional.empty();

        private Optional<String> eventName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Pricing other) {
            eventName(other.getEventName());
            taxable(other.getTaxable());
            creditCost(other.getCreditCost());
            chargeType(other.getChargeType());
            pricingModel(other.getPricingModel());
            billingFrequency(other.getBillingFrequency());
            pricePoints(other.getPricePoints());
            return this;
        }

        @java.lang.Override
        @JsonSetter("taxable")
        public ChargeTypeStage taxable(boolean taxable) {
            this.taxable = taxable;
            return this;
        }

        @java.lang.Override
        @JsonSetter("chargeType")
        public PricingModelStage chargeType(@NotNull ChargeType chargeType) {
            this.chargeType = Objects.requireNonNull(chargeType, "chargeType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("pricingModel")
        public BillingFrequencyStage pricingModel(@NotNull PricingModelType pricingModel) {
            this.pricingModel = Objects.requireNonNull(pricingModel, "pricingModel must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("billingFrequency")
        public _FinalStage billingFrequency(@NotNull BillingFrequency billingFrequency) {
            this.billingFrequency = Objects.requireNonNull(billingFrequency, "billingFrequency must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage pricePoints(String key, AgentPricePoint value) {
            this.pricePoints.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllPricePoints(Map<String, AgentPricePoint> pricePoints) {
            this.pricePoints.putAll(pricePoints);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pricePoints", nulls = Nulls.SKIP)
        public _FinalStage pricePoints(Map<String, AgentPricePoint> pricePoints) {
            this.pricePoints.clear();
            this.pricePoints.putAll(pricePoints);
            return this;
        }

        @java.lang.Override
        public _FinalStage creditCost(Double creditCost) {
            this.creditCost = Optional.ofNullable(creditCost);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "creditCost", nulls = Nulls.SKIP)
        public _FinalStage creditCost(Optional<Double> creditCost) {
            this.creditCost = creditCost;
            return this;
        }

        @java.lang.Override
        public _FinalStage eventName(String eventName) {
            this.eventName = Optional.ofNullable(eventName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eventName", nulls = Nulls.SKIP)
        public _FinalStage eventName(Optional<String> eventName) {
            this.eventName = eventName;
            return this;
        }

        @java.lang.Override
        public Pricing build() {
            return new Pricing(
                    eventName,
                    taxable,
                    creditCost,
                    chargeType,
                    pricingModel,
                    billingFrequency,
                    pricePoints,
                    additionalProperties);
        }
    }
}
