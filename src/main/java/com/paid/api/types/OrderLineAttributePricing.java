/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineAttributePricing.Builder.class)
public final class OrderLineAttributePricing {
    private final Optional<String> eventName;

    private final Optional<ChargeType> chargeType;

    private final Optional<PricePoint> pricePoint;

    private final Optional<PricingModelType> pricingModel;

    private final Optional<BillingFrequency> billingFrequency;

    private final Map<String, Object> additionalProperties;

    private OrderLineAttributePricing(
            Optional<String> eventName,
            Optional<ChargeType> chargeType,
            Optional<PricePoint> pricePoint,
            Optional<PricingModelType> pricingModel,
            Optional<BillingFrequency> billingFrequency,
            Map<String, Object> additionalProperties) {
        this.eventName = eventName;
        this.chargeType = chargeType;
        this.pricePoint = pricePoint;
        this.pricingModel = pricingModel;
        this.billingFrequency = billingFrequency;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventName")
    public Optional<String> getEventName() {
        return eventName;
    }

    @JsonProperty("chargeType")
    public Optional<ChargeType> getChargeType() {
        return chargeType;
    }

    @JsonProperty("pricePoint")
    public Optional<PricePoint> getPricePoint() {
        return pricePoint;
    }

    @JsonProperty("pricingModel")
    public Optional<PricingModelType> getPricingModel() {
        return pricingModel;
    }

    @JsonProperty("billingFrequency")
    public Optional<BillingFrequency> getBillingFrequency() {
        return billingFrequency;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineAttributePricing && equalTo((OrderLineAttributePricing) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineAttributePricing other) {
        return eventName.equals(other.eventName)
                && chargeType.equals(other.chargeType)
                && pricePoint.equals(other.pricePoint)
                && pricingModel.equals(other.pricingModel)
                && billingFrequency.equals(other.billingFrequency);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventName, this.chargeType, this.pricePoint, this.pricingModel, this.billingFrequency);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> eventName = Optional.empty();

        private Optional<ChargeType> chargeType = Optional.empty();

        private Optional<PricePoint> pricePoint = Optional.empty();

        private Optional<PricingModelType> pricingModel = Optional.empty();

        private Optional<BillingFrequency> billingFrequency = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLineAttributePricing other) {
            eventName(other.getEventName());
            chargeType(other.getChargeType());
            pricePoint(other.getPricePoint());
            pricingModel(other.getPricingModel());
            billingFrequency(other.getBillingFrequency());
            return this;
        }

        @JsonSetter(value = "eventName", nulls = Nulls.SKIP)
        public Builder eventName(Optional<String> eventName) {
            this.eventName = eventName;
            return this;
        }

        public Builder eventName(String eventName) {
            this.eventName = Optional.ofNullable(eventName);
            return this;
        }

        @JsonSetter(value = "chargeType", nulls = Nulls.SKIP)
        public Builder chargeType(Optional<ChargeType> chargeType) {
            this.chargeType = chargeType;
            return this;
        }

        public Builder chargeType(ChargeType chargeType) {
            this.chargeType = Optional.ofNullable(chargeType);
            return this;
        }

        @JsonSetter(value = "pricePoint", nulls = Nulls.SKIP)
        public Builder pricePoint(Optional<PricePoint> pricePoint) {
            this.pricePoint = pricePoint;
            return this;
        }

        public Builder pricePoint(PricePoint pricePoint) {
            this.pricePoint = Optional.ofNullable(pricePoint);
            return this;
        }

        @JsonSetter(value = "pricingModel", nulls = Nulls.SKIP)
        public Builder pricingModel(Optional<PricingModelType> pricingModel) {
            this.pricingModel = pricingModel;
            return this;
        }

        public Builder pricingModel(PricingModelType pricingModel) {
            this.pricingModel = Optional.ofNullable(pricingModel);
            return this;
        }

        @JsonSetter(value = "billingFrequency", nulls = Nulls.SKIP)
        public Builder billingFrequency(Optional<BillingFrequency> billingFrequency) {
            this.billingFrequency = billingFrequency;
            return this;
        }

        public Builder billingFrequency(BillingFrequency billingFrequency) {
            this.billingFrequency = Optional.ofNullable(billingFrequency);
            return this;
        }

        public OrderLineAttributePricing build() {
            return new OrderLineAttributePricing(
                    eventName, chargeType, pricePoint, pricingModel, billingFrequency, additionalProperties);
        }
    }
}
