/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Signal.Builder.class)
public final class Signal {
    private final Optional<String> eventName;

    private final Optional<String> agentId;

    private final Optional<String> externalAgentId;

    private final Optional<String> customerId;

    private final Optional<Map<String, Object>> data;

    private final Map<String, Object> additionalProperties;

    private Signal(
            Optional<String> eventName,
            Optional<String> agentId,
            Optional<String> externalAgentId,
            Optional<String> customerId,
            Optional<Map<String, Object>> data,
            Map<String, Object> additionalProperties) {
        this.eventName = eventName;
        this.agentId = agentId;
        this.externalAgentId = externalAgentId;
        this.customerId = customerId;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("event_name")
    public Optional<String> getEventName() {
        return eventName;
    }

    @JsonProperty("agent_id")
    public Optional<String> getAgentId() {
        return agentId;
    }

    @JsonProperty("external_agent_id")
    public Optional<String> getExternalAgentId() {
        return externalAgentId;
    }

    @JsonProperty("customer_id")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    @JsonProperty("data")
    public Optional<Map<String, Object>> getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Signal && equalTo((Signal) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Signal other) {
        return eventName.equals(other.eventName)
                && agentId.equals(other.agentId)
                && externalAgentId.equals(other.externalAgentId)
                && customerId.equals(other.customerId)
                && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventName, this.agentId, this.externalAgentId, this.customerId, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> eventName = Optional.empty();

        private Optional<String> agentId = Optional.empty();

        private Optional<String> externalAgentId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<Map<String, Object>> data = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Signal other) {
            eventName(other.getEventName());
            agentId(other.getAgentId());
            externalAgentId(other.getExternalAgentId());
            customerId(other.getCustomerId());
            data(other.getData());
            return this;
        }

        @JsonSetter(value = "event_name", nulls = Nulls.SKIP)
        public Builder eventName(Optional<String> eventName) {
            this.eventName = eventName;
            return this;
        }

        public Builder eventName(String eventName) {
            this.eventName = Optional.ofNullable(eventName);
            return this;
        }

        @JsonSetter(value = "agent_id", nulls = Nulls.SKIP)
        public Builder agentId(Optional<String> agentId) {
            this.agentId = agentId;
            return this;
        }

        public Builder agentId(String agentId) {
            this.agentId = Optional.ofNullable(agentId);
            return this;
        }

        @JsonSetter(value = "external_agent_id", nulls = Nulls.SKIP)
        public Builder externalAgentId(Optional<String> externalAgentId) {
            this.externalAgentId = externalAgentId;
            return this;
        }

        public Builder externalAgentId(String externalAgentId) {
            this.externalAgentId = Optional.ofNullable(externalAgentId);
            return this;
        }

        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Map<String, Object>> data) {
            this.data = data;
            return this;
        }

        public Builder data(Map<String, Object> data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Signal build() {
            return new Signal(eventName, agentId, externalAgentId, customerId, data, additionalProperties);
        }
    }
}
