/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentUpdate.Builder.class)
public final class AgentUpdate {
    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<String> externalId;

    private final Optional<Boolean> active;

    private final Optional<String> agentCode;

    private final Optional<List<AgentAttribute>> agentAttributes;

    private final Map<String, Object> additionalProperties;

    private AgentUpdate(
            Optional<String> name,
            Optional<String> description,
            Optional<String> externalId,
            Optional<Boolean> active,
            Optional<String> agentCode,
            Optional<List<AgentAttribute>> agentAttributes,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.externalId = externalId;
        this.active = active;
        this.agentCode = agentCode;
        this.agentAttributes = agentAttributes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    @JsonProperty("agentCode")
    public Optional<String> getAgentCode() {
        return agentCode;
    }

    @JsonProperty("agentAttributes")
    public Optional<List<AgentAttribute>> getAgentAttributes() {
        return agentAttributes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentUpdate && equalTo((AgentUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentUpdate other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && externalId.equals(other.externalId)
                && active.equals(other.active)
                && agentCode.equals(other.agentCode)
                && agentAttributes.equals(other.agentAttributes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name, this.description, this.externalId, this.active, this.agentCode, this.agentAttributes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<Boolean> active = Optional.empty();

        private Optional<String> agentCode = Optional.empty();

        private Optional<List<AgentAttribute>> agentAttributes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AgentUpdate other) {
            name(other.getName());
            description(other.getDescription());
            externalId(other.getExternalId());
            active(other.getActive());
            agentCode(other.getAgentCode());
            agentAttributes(other.getAgentAttributes());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public Builder active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        @JsonSetter(value = "agentCode", nulls = Nulls.SKIP)
        public Builder agentCode(Optional<String> agentCode) {
            this.agentCode = agentCode;
            return this;
        }

        public Builder agentCode(String agentCode) {
            this.agentCode = Optional.ofNullable(agentCode);
            return this;
        }

        @JsonSetter(value = "agentAttributes", nulls = Nulls.SKIP)
        public Builder agentAttributes(Optional<List<AgentAttribute>> agentAttributes) {
            this.agentAttributes = agentAttributes;
            return this;
        }

        public Builder agentAttributes(List<AgentAttribute> agentAttributes) {
            this.agentAttributes = Optional.ofNullable(agentAttributes);
            return this;
        }

        public AgentUpdate build() {
            return new AgentUpdate(
                    name, description, externalId, active, agentCode, agentAttributes, additionalProperties);
        }
    }
}
