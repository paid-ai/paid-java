/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLine.Builder.class)
public final class OrderLine {
    private final Optional<String> id;

    private final Optional<String> orderId;

    private final Optional<String> agentId;

    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<String> startDate;

    private final Optional<String> endDate;

    private final Optional<Double> totalAmount;

    private final Optional<Double> billedAmountWithoutTax;

    private final Optional<Double> billedTax;

    private final Optional<Double> totalBilledAmount;

    private final Optional<CreationState> creationState;

    private final Optional<Agent> agent;

    private final Optional<List<OrderLineAttribute>> orderLineAttributes;

    private final Map<String, Object> additionalProperties;

    private OrderLine(
            Optional<String> id,
            Optional<String> orderId,
            Optional<String> agentId,
            Optional<String> name,
            Optional<String> description,
            Optional<String> startDate,
            Optional<String> endDate,
            Optional<Double> totalAmount,
            Optional<Double> billedAmountWithoutTax,
            Optional<Double> billedTax,
            Optional<Double> totalBilledAmount,
            Optional<CreationState> creationState,
            Optional<Agent> agent,
            Optional<List<OrderLineAttribute>> orderLineAttributes,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.orderId = orderId;
        this.agentId = agentId;
        this.name = name;
        this.description = description;
        this.startDate = startDate;
        this.endDate = endDate;
        this.totalAmount = totalAmount;
        this.billedAmountWithoutTax = billedAmountWithoutTax;
        this.billedTax = billedTax;
        this.totalBilledAmount = totalBilledAmount;
        this.creationState = creationState;
        this.agent = agent;
        this.orderLineAttributes = orderLineAttributes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    @JsonProperty("agentId")
    public Optional<String> getAgentId() {
        return agentId;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("startDate")
    public Optional<String> getStartDate() {
        return startDate;
    }

    @JsonProperty("endDate")
    public Optional<String> getEndDate() {
        return endDate;
    }

    @JsonProperty("totalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    @JsonProperty("billedAmountWithoutTax")
    public Optional<Double> getBilledAmountWithoutTax() {
        return billedAmountWithoutTax;
    }

    @JsonProperty("billedTax")
    public Optional<Double> getBilledTax() {
        return billedTax;
    }

    @JsonProperty("totalBilledAmount")
    public Optional<Double> getTotalBilledAmount() {
        return totalBilledAmount;
    }

    @JsonProperty("creationState")
    public Optional<CreationState> getCreationState() {
        return creationState;
    }

    @JsonProperty("agent")
    public Optional<Agent> getAgent() {
        return agent;
    }

    @JsonProperty("orderLineAttributes")
    public Optional<List<OrderLineAttribute>> getOrderLineAttributes() {
        return orderLineAttributes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLine && equalTo((OrderLine) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLine other) {
        return id.equals(other.id)
                && orderId.equals(other.orderId)
                && agentId.equals(other.agentId)
                && name.equals(other.name)
                && description.equals(other.description)
                && startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && totalAmount.equals(other.totalAmount)
                && billedAmountWithoutTax.equals(other.billedAmountWithoutTax)
                && billedTax.equals(other.billedTax)
                && totalBilledAmount.equals(other.totalBilledAmount)
                && creationState.equals(other.creationState)
                && agent.equals(other.agent)
                && orderLineAttributes.equals(other.orderLineAttributes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.orderId,
                this.agentId,
                this.name,
                this.description,
                this.startDate,
                this.endDate,
                this.totalAmount,
                this.billedAmountWithoutTax,
                this.billedTax,
                this.totalBilledAmount,
                this.creationState,
                this.agent,
                this.orderLineAttributes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> agentId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Double> billedAmountWithoutTax = Optional.empty();

        private Optional<Double> billedTax = Optional.empty();

        private Optional<Double> totalBilledAmount = Optional.empty();

        private Optional<CreationState> creationState = Optional.empty();

        private Optional<Agent> agent = Optional.empty();

        private Optional<List<OrderLineAttribute>> orderLineAttributes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLine other) {
            id(other.getId());
            orderId(other.getOrderId());
            agentId(other.getAgentId());
            name(other.getName());
            description(other.getDescription());
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            totalAmount(other.getTotalAmount());
            billedAmountWithoutTax(other.getBilledAmountWithoutTax());
            billedTax(other.getBilledTax());
            totalBilledAmount(other.getTotalBilledAmount());
            creationState(other.getCreationState());
            agent(other.getAgent());
            orderLineAttributes(other.getOrderLineAttributes());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @JsonSetter(value = "agentId", nulls = Nulls.SKIP)
        public Builder agentId(Optional<String> agentId) {
            this.agentId = agentId;
            return this;
        }

        public Builder agentId(String agentId) {
            this.agentId = Optional.ofNullable(agentId);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "startDate", nulls = Nulls.SKIP)
        public Builder startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        @JsonSetter(value = "billedAmountWithoutTax", nulls = Nulls.SKIP)
        public Builder billedAmountWithoutTax(Optional<Double> billedAmountWithoutTax) {
            this.billedAmountWithoutTax = billedAmountWithoutTax;
            return this;
        }

        public Builder billedAmountWithoutTax(Double billedAmountWithoutTax) {
            this.billedAmountWithoutTax = Optional.ofNullable(billedAmountWithoutTax);
            return this;
        }

        @JsonSetter(value = "billedTax", nulls = Nulls.SKIP)
        public Builder billedTax(Optional<Double> billedTax) {
            this.billedTax = billedTax;
            return this;
        }

        public Builder billedTax(Double billedTax) {
            this.billedTax = Optional.ofNullable(billedTax);
            return this;
        }

        @JsonSetter(value = "totalBilledAmount", nulls = Nulls.SKIP)
        public Builder totalBilledAmount(Optional<Double> totalBilledAmount) {
            this.totalBilledAmount = totalBilledAmount;
            return this;
        }

        public Builder totalBilledAmount(Double totalBilledAmount) {
            this.totalBilledAmount = Optional.ofNullable(totalBilledAmount);
            return this;
        }

        @JsonSetter(value = "creationState", nulls = Nulls.SKIP)
        public Builder creationState(Optional<CreationState> creationState) {
            this.creationState = creationState;
            return this;
        }

        public Builder creationState(CreationState creationState) {
            this.creationState = Optional.ofNullable(creationState);
            return this;
        }

        @JsonSetter(value = "agent", nulls = Nulls.SKIP)
        public Builder agent(Optional<Agent> agent) {
            this.agent = agent;
            return this;
        }

        public Builder agent(Agent agent) {
            this.agent = Optional.ofNullable(agent);
            return this;
        }

        @JsonSetter(value = "orderLineAttributes", nulls = Nulls.SKIP)
        public Builder orderLineAttributes(Optional<List<OrderLineAttribute>> orderLineAttributes) {
            this.orderLineAttributes = orderLineAttributes;
            return this;
        }

        public Builder orderLineAttributes(List<OrderLineAttribute> orderLineAttributes) {
            this.orderLineAttributes = Optional.ofNullable(orderLineAttributes);
            return this;
        }

        public OrderLine build() {
            return new OrderLine(
                    id,
                    orderId,
                    agentId,
                    name,
                    description,
                    startDate,
                    endDate,
                    totalAmount,
                    billedAmountWithoutTax,
                    billedTax,
                    totalBilledAmount,
                    creationState,
                    agent,
                    orderLineAttributes,
                    additionalProperties);
        }
    }
}
