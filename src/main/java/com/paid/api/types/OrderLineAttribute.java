/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineAttribute.Builder.class)
public final class OrderLineAttribute {
    private final Optional<String> agentAttributeId;

    private final Optional<Double> quantity;

    private final Optional<String> currency;

    private final Optional<OrderLineAttributePricing> pricing;

    private final Map<String, Object> additionalProperties;

    private OrderLineAttribute(
            Optional<String> agentAttributeId,
            Optional<Double> quantity,
            Optional<String> currency,
            Optional<OrderLineAttributePricing> pricing,
            Map<String, Object> additionalProperties) {
        this.agentAttributeId = agentAttributeId;
        this.quantity = quantity;
        this.currency = currency;
        this.pricing = pricing;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("agentAttributeId")
    public Optional<String> getAgentAttributeId() {
        return agentAttributeId;
    }

    @JsonProperty("quantity")
    public Optional<Double> getQuantity() {
        return quantity;
    }

    @JsonProperty("currency")
    public Optional<String> getCurrency() {
        return currency;
    }

    @JsonProperty("pricing")
    public Optional<OrderLineAttributePricing> getPricing() {
        return pricing;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineAttribute && equalTo((OrderLineAttribute) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineAttribute other) {
        return agentAttributeId.equals(other.agentAttributeId)
                && quantity.equals(other.quantity)
                && currency.equals(other.currency)
                && pricing.equals(other.pricing);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.agentAttributeId, this.quantity, this.currency, this.pricing);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> agentAttributeId = Optional.empty();

        private Optional<Double> quantity = Optional.empty();

        private Optional<String> currency = Optional.empty();

        private Optional<OrderLineAttributePricing> pricing = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLineAttribute other) {
            agentAttributeId(other.getAgentAttributeId());
            quantity(other.getQuantity());
            currency(other.getCurrency());
            pricing(other.getPricing());
            return this;
        }

        @JsonSetter(value = "agentAttributeId", nulls = Nulls.SKIP)
        public Builder agentAttributeId(Optional<String> agentAttributeId) {
            this.agentAttributeId = agentAttributeId;
            return this;
        }

        public Builder agentAttributeId(String agentAttributeId) {
            this.agentAttributeId = Optional.ofNullable(agentAttributeId);
            return this;
        }

        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<Double> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(Double quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public Builder currency(Optional<String> currency) {
            this.currency = currency;
            return this;
        }

        public Builder currency(String currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        @JsonSetter(value = "pricing", nulls = Nulls.SKIP)
        public Builder pricing(Optional<OrderLineAttributePricing> pricing) {
            this.pricing = pricing;
            return this;
        }

        public Builder pricing(OrderLineAttributePricing pricing) {
            this.pricing = Optional.ofNullable(pricing);
            return this;
        }

        public OrderLineAttribute build() {
            return new OrderLineAttribute(agentAttributeId, quantity, currency, pricing, additionalProperties);
        }
    }
}
