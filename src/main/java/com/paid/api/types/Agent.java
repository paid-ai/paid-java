/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Agent.Builder.class)
public final class Agent {
    private final String id;

    private final Optional<String> externalId;

    private final String organizationId;

    private final String name;

    private final Optional<String> description;

    private final boolean active;

    private final Optional<String> agentCode;

    private final Optional<List<AgentAttribute>> agentAttributes;

    private final Map<String, Object> additionalProperties;

    private Agent(
            String id,
            Optional<String> externalId,
            String organizationId,
            String name,
            Optional<String> description,
            boolean active,
            Optional<String> agentCode,
            Optional<List<AgentAttribute>> agentAttributes,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalId = externalId;
        this.organizationId = organizationId;
        this.name = name;
        this.description = description;
        this.active = active;
        this.agentCode = agentCode;
        this.agentAttributes = agentAttributes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("organizationId")
    public String getOrganizationId() {
        return organizationId;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("active")
    public boolean getActive() {
        return active;
    }

    @JsonProperty("agentCode")
    public Optional<String> getAgentCode() {
        return agentCode;
    }

    @JsonProperty("agentAttributes")
    public Optional<List<AgentAttribute>> getAgentAttributes() {
        return agentAttributes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Agent && equalTo((Agent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Agent other) {
        return id.equals(other.id)
                && externalId.equals(other.externalId)
                && organizationId.equals(other.organizationId)
                && name.equals(other.name)
                && description.equals(other.description)
                && active == other.active
                && agentCode.equals(other.agentCode)
                && agentAttributes.equals(other.agentAttributes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.externalId,
                this.organizationId,
                this.name,
                this.description,
                this.active,
                this.agentCode,
                this.agentAttributes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        OrganizationIdStage id(@NotNull String id);

        Builder from(Agent other);
    }

    public interface OrganizationIdStage {
        NameStage organizationId(@NotNull String organizationId);
    }

    public interface NameStage {
        ActiveStage name(@NotNull String name);
    }

    public interface ActiveStage {
        _FinalStage active(boolean active);
    }

    public interface _FinalStage {
        Agent build();

        _FinalStage externalId(Optional<String> externalId);

        _FinalStage externalId(String externalId);

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage agentCode(Optional<String> agentCode);

        _FinalStage agentCode(String agentCode);

        _FinalStage agentAttributes(Optional<List<AgentAttribute>> agentAttributes);

        _FinalStage agentAttributes(List<AgentAttribute> agentAttributes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrganizationIdStage, NameStage, ActiveStage, _FinalStage {
        private String id;

        private String organizationId;

        private String name;

        private boolean active;

        private Optional<List<AgentAttribute>> agentAttributes = Optional.empty();

        private Optional<String> agentCode = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Agent other) {
            id(other.getId());
            externalId(other.getExternalId());
            organizationId(other.getOrganizationId());
            name(other.getName());
            description(other.getDescription());
            active(other.getActive());
            agentCode(other.getAgentCode());
            agentAttributes(other.getAgentAttributes());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public OrganizationIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("organizationId")
        public NameStage organizationId(@NotNull String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId, "organizationId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public ActiveStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("active")
        public _FinalStage active(boolean active) {
            this.active = active;
            return this;
        }

        @java.lang.Override
        public _FinalStage agentAttributes(List<AgentAttribute> agentAttributes) {
            this.agentAttributes = Optional.ofNullable(agentAttributes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "agentAttributes", nulls = Nulls.SKIP)
        public _FinalStage agentAttributes(Optional<List<AgentAttribute>> agentAttributes) {
            this.agentAttributes = agentAttributes;
            return this;
        }

        @java.lang.Override
        public _FinalStage agentCode(String agentCode) {
            this.agentCode = Optional.ofNullable(agentCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "agentCode", nulls = Nulls.SKIP)
        public _FinalStage agentCode(Optional<String> agentCode) {
            this.agentCode = agentCode;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public _FinalStage externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        public Agent build() {
            return new Agent(
                    id,
                    externalId,
                    organizationId,
                    name,
                    description,
                    active,
                    agentCode,
                    agentAttributes,
                    additionalProperties);
        }
    }
}
