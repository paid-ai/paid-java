/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentPricePointTiers.Builder.class)
public final class AgentPricePointTiers {
    private final Optional<Double> minQuantity;

    private final Optional<Double> maxQuantity;

    private final double unitPrice;

    private final Map<String, Object> additionalProperties;

    private AgentPricePointTiers(
            Optional<Double> minQuantity,
            Optional<Double> maxQuantity,
            double unitPrice,
            Map<String, Object> additionalProperties) {
        this.minQuantity = minQuantity;
        this.maxQuantity = maxQuantity;
        this.unitPrice = unitPrice;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("minQuantity")
    public Optional<Double> getMinQuantity() {
        return minQuantity;
    }

    @JsonProperty("maxQuantity")
    public Optional<Double> getMaxQuantity() {
        return maxQuantity;
    }

    @JsonProperty("unitPrice")
    public double getUnitPrice() {
        return unitPrice;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentPricePointTiers && equalTo((AgentPricePointTiers) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentPricePointTiers other) {
        return minQuantity.equals(other.minQuantity)
                && maxQuantity.equals(other.maxQuantity)
                && unitPrice == other.unitPrice;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minQuantity, this.maxQuantity, this.unitPrice);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UnitPriceStage builder() {
        return new Builder();
    }

    public interface UnitPriceStage {
        _FinalStage unitPrice(double unitPrice);

        Builder from(AgentPricePointTiers other);
    }

    public interface _FinalStage {
        AgentPricePointTiers build();

        _FinalStage minQuantity(Optional<Double> minQuantity);

        _FinalStage minQuantity(Double minQuantity);

        _FinalStage maxQuantity(Optional<Double> maxQuantity);

        _FinalStage maxQuantity(Double maxQuantity);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UnitPriceStage, _FinalStage {
        private double unitPrice;

        private Optional<Double> maxQuantity = Optional.empty();

        private Optional<Double> minQuantity = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AgentPricePointTiers other) {
            minQuantity(other.getMinQuantity());
            maxQuantity(other.getMaxQuantity());
            unitPrice(other.getUnitPrice());
            return this;
        }

        @java.lang.Override
        @JsonSetter("unitPrice")
        public _FinalStage unitPrice(double unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        @java.lang.Override
        public _FinalStage maxQuantity(Double maxQuantity) {
            this.maxQuantity = Optional.ofNullable(maxQuantity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maxQuantity", nulls = Nulls.SKIP)
        public _FinalStage maxQuantity(Optional<Double> maxQuantity) {
            this.maxQuantity = maxQuantity;
            return this;
        }

        @java.lang.Override
        public _FinalStage minQuantity(Double minQuantity) {
            this.minQuantity = Optional.ofNullable(minQuantity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "minQuantity", nulls = Nulls.SKIP)
        public _FinalStage minQuantity(Optional<Double> minQuantity) {
            this.minQuantity = minQuantity;
            return this;
        }

        @java.lang.Override
        public AgentPricePointTiers build() {
            return new AgentPricePointTiers(minQuantity, maxQuantity, unitPrice, additionalProperties);
        }
    }
}
