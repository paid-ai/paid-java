/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.paid.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paid.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Tier.Builder.class)
public final class Tier {
    private final Optional<Double> lowerBound;

    private final Optional<Double> upperBound;

    private final Optional<Double> price;

    private final Map<String, Object> additionalProperties;

    private Tier(
            Optional<Double> lowerBound,
            Optional<Double> upperBound,
            Optional<Double> price,
            Map<String, Object> additionalProperties) {
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
        this.price = price;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lowerBound")
    public Optional<Double> getLowerBound() {
        return lowerBound;
    }

    @JsonProperty("upperBound")
    public Optional<Double> getUpperBound() {
        return upperBound;
    }

    @JsonProperty("price")
    public Optional<Double> getPrice() {
        return price;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Tier && equalTo((Tier) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Tier other) {
        return lowerBound.equals(other.lowerBound) && upperBound.equals(other.upperBound) && price.equals(other.price);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.lowerBound, this.upperBound, this.price);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> lowerBound = Optional.empty();

        private Optional<Double> upperBound = Optional.empty();

        private Optional<Double> price = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Tier other) {
            lowerBound(other.getLowerBound());
            upperBound(other.getUpperBound());
            price(other.getPrice());
            return this;
        }

        @JsonSetter(value = "lowerBound", nulls = Nulls.SKIP)
        public Builder lowerBound(Optional<Double> lowerBound) {
            this.lowerBound = lowerBound;
            return this;
        }

        public Builder lowerBound(Double lowerBound) {
            this.lowerBound = Optional.ofNullable(lowerBound);
            return this;
        }

        @JsonSetter(value = "upperBound", nulls = Nulls.SKIP)
        public Builder upperBound(Optional<Double> upperBound) {
            this.upperBound = upperBound;
            return this;
        }

        public Builder upperBound(Double upperBound) {
            this.upperBound = Optional.ofNullable(upperBound);
            return this;
        }

        @JsonSetter(value = "price", nulls = Nulls.SKIP)
        public Builder price(Optional<Double> price) {
            this.price = price;
            return this;
        }

        public Builder price(Double price) {
            this.price = Optional.ofNullable(price);
            return this;
        }

        public Tier build() {
            return new Tier(lowerBound, upperBound, price, additionalProperties);
        }
    }
}
